### Glide使用场景

#### 1. 假设之前服务器上的图片不支持按尺寸裁剪，现在app端需要服务器提供按尺寸裁剪的功能，然后图片服务器必须要通过token才能访问，怎样通过Glide去做

> 假设之前的图片连接为http://tub.img.com/sss.png
>
> 修改后可以https://tub.img.com/sss.png?token=aaa&size=100*100

那么连接方式修改后会出现什么问题？

如果直接加载修改后的链接，那么：

1. 同一张图片，如果token变了，之前的缓存无法使用
2. 每次load时都要手动获取imageView的尺寸，然后修改链接再调用，很麻烦

思路：

1. 新增一个TokenImage类，因为model要参与构造EngineKey，所以如果token参与equals和hash，那么会造成同一个链接当token不同时会找不到ActiveResource缓存

```kotlin
data class TokenImage(val url:String, val token:String)：Key {
  //只需要考虑url
  override fun equals(o:Object) : Boolean {
    if (this == o) { return true; }
    if (o == null || getClass() != o.getClass()) { return false; }
    TokenImage that = (TokenImage) o;
    return Objects.equals(url, that.url);
  }
  override fun hashCode():Int = Objects.hash(url);
  //这个方法在DiskCache生成文件名时会用到，因此也只需要url
  override fun updateDiskCacheKey(digest:MessageDigest) {
    digest.update(url.getBytes())
  }
}
```

2. 新增一个解析TokenImage的ModelLoader

```kotlin
//更好的方式是继承自BaseGlideUriModel
class TokenImageModelLoader : ModelLoader<TokenImage, InputStream> {
	override fun handles(ti:TokenImage) : Boolean = true
  override fun buildLoadData(model:TokenImage, width:Int, height:Int, options:Options):LoadData<InputStream>  {
    //类似HttpUrlFetcher之类的，都会忽略掉width和height参数，这里我们要用他们来拼接url
    val url = makeSizedTokenUrl(model, width, height);
   	val timeout = options.get(TIMEOUT)
    //1. 这里可以换成其他的Fetcher
    //2. LoadData中的sourceKey会在DecodeJob.getNextGenerator中用到
    //比如ResourceCacheGenerator.startNext中的sourceIds里面就有当前的model
    //然后用来获取磁盘缓存的ResourceCacheKey，如果其他条件不变，也只跟model和图片尺寸有关
    //因为现在的TokenImage只跟url有关，因此如果只是token不同，还是能获取到同一个磁盘缓存
    return LoadData<>(model, HttpUrlFetcher(url, timeout))
  }
  
  private fun makeSizedTokenUrl(model:TokenImage, width:Int, height:Int) : GlideUrl {
    val url = model.url +"?token=${model.token}&size=${width}*${height}"
    return GlideUrl(url)
  }
}
```

#### 2. 如果同一个链接的图片内容改变了（当然实际中不会出现这种，但是本地图片有可能），怎样才能显示新的图片并更新缓存

```kotlin
fun loadImage(url:String) {
  //如果之前的图片是这样加载的
  Glide.with(this).load(url).into(view);
  //要更新图片以及缓存
  Glide.with(this).load(url).signature(someKey).into(view);
}
```

